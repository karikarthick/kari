#!/usr/bin/python

import os, sys, getopt

from datetime import datetime
from ConfigParser import ConfigParser

et_xmlfileEgg = '/tap/dev/rcim/scripts/wmtp/kariPython/site-packages/et_xmlfile-1.0.1-py2.6.egg'
jdcalEgg = '/tap/dev/rcim/scripts/wmtp/kariPython/site-packages/jdcal-1.3-py2.6.egg'
openpyxlEgg = '/tap/dev/rcim/scripts/wmtp/kariPython/site-packages/openpyxl-2.4.0-a1'
eggList = [et_xmlfileEgg, jdcalEgg, openpyxlEgg]
sys.path.extend(eggList)

from openpyxl import load_workbook


def getRmCondition(x):
    ''' Frame the in condition and return '''

    rmCon = ''
    for i in x.split(','):
        rmCon += '''\n            <OUTCOND NAME="%s-OK" ODATE="ODAT" SIGN="-" />''' % (i)
    return rmCon


def getInCondition(x):
    ''' Frame the in condition and return '''

    inCon = ''
    for i in x.split(','):
        last = len(i.split('|')) - 1
        for idx, j in enumerate(i.split('|')):
            andOr = 'A' if idx == last else 'O'
            operand = ''
            if j.startswith('('):
                operand = ' OP="("'
            elif j.endswith(')'):
                operand = ' OP=")"'
            inCon += '''\n            <INCOND NAME="%s-OK" ODATE="ODAT" AND_OR="%s"%s />''' % (j.replace('(','').replace(')',''), andOr, operand)
    return inCon


def convertExcelToXML(inFile, outFile, fileType):
    ''' Convert excel file to XML file '''

    print('Generating xml file for [%s] ...' % fileType)
    wb = load_workbook(filename=inFile, read_only=True)

    curDateTime = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cDate = datetime.now().strftime('%Y%m%d')
    cTime = datetime.now().strftime('%H%M%S')

    linesToIgnore = int(config.get('DEFAULT', 'linesToIgnore'))
    sheetTitles = config.get('DEFAULT', 'sheetTitles').split(',')

    section = fileType.upper()
    dataCenter = config.get(section, 'dataCenter')
    version = config.get(section, 'version')
    application = config.get(section, 'application')
    folderName = config.get(section, 'folderName')

    outFileObj = open(outFile, 'w')

    headerLine = '''<?xml version="1.0" encoding="utf-8"?>\n<!--Generated by kari at %s-->\n<DEFTABLE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Folder.xsd">\n    <FOLDER DATACENTER="%s" VERSION="%s" PLATFORM="UNIX" FOLDER_NAME="%s" FOLDER_ORDER_METHOD="SYSTEM">''' % (curDateTime, dataCenter, version, folderName)

    outFileObj.write(headerLine)

    for ws in wb.worksheets:
        if ws.title not in sheetTitles : continue
        print('Processing sheet : [%s] ...' % ws.title)

        for jobIndex, row in enumerate(ws.rows):
            if jobIndex < linesToIgnore: continue

            rowArray = map(lambda x: x if x != 'None' else '', [str(cell.value).encode('utf-8') for cell in row])

            if not rowArray[0]: continue

            nodeId = rowArray[0]

            groupName = rowArray[1]

            critical = rowArray[2]

            runAs = rowArray[3]

            inCon = getInCondition(rowArray[4]) if rowArray[4] not in ['NA', ''] else ''

            jobName = rowArray[5]

            jobDesc = rowArray[6].replace('&', '&amp;')

            memLib = rowArray[7]

            memName = rowArray[8]

            varName = ''
            for idx, param in enumerate(rowArray[9].split(',')):
                varName += '''\n            <VARIABLE NAME="%%%%PARM%s" VALUE="%s" />''' % (idx+1, param.replace('"', '&quot;'))
            if rowArray[9] in ['NA', '']: varName = ''

            weekDays = ''' WEEKDAYS="%s"''' % (rowArray[10]) if rowArray[10] not in ['NA', '', 'ALL'] else ''

            monthDays = rowArray[11]

            daysAndOr = rowArray[12]

            cal = ''' DAYSCAL="%s"''' % (rowArray[13]) if rowArray[13] not in ['NA', ''] else ''

            timeFrom = ''' TIMEFROM="%s"''' % (('0000' + rowArray[14])[-4:]) if rowArray[14] not in ['NA', ''] else ''

            timeTo = ('0000' + rowArray[15])[-4:] if rowArray[15] not in ['NA', ''] else '&gt;'

            rmCon = getRmCondition(rowArray[16]) if rowArray[16] not in ['NA', ''] else ''

            cyclicFlag = rowArray[17]

            cyclic = 1 if cyclicFlag == 'Y' else 0

            cyclicInterval = ('0000' + rowArray[18])[-4:] + 'M' if cyclicFlag == 'Y' else '00001M'

            months = ' JAN="1" FEB="1" MAR="1" APR="1" MAY="1" JUN="1" JUL="1" AUG="1" SEP="1" OCT="1" NOV="1" DEC="1"'
            if rowArray[19] not in ['', 'N', 'Y', 'NA', 'ALL']:
                months = ''
                for idx, monthName in enumerate('JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC'.split(',')):
                    months += ' %s="1"' % (monthName) if str(idx+1) in rowArray[19].split(',') else ' %s="0"' % (monthName)

            maxWait = 0 if cyclicFlag == 'Y' else 3

            indCyclic = 'E' if cyclicFlag == 'Y' else 'S'

            jobLine = '''\n        <JOB JOBISN="%s" APPLICATION="%s" SUB_APPLICATION="%s" MEMLIB="%s" MEMNAME="%s" JOBNAME="%s" DESCRIPTION="%s" CREATED_BY="kari" RUN_AS="%s" CRITICAL="%s" TASKTYPE="Job" CYCLIC="%s" NODEID="%s" INTERVAL="%s" CONFIRM="0"%s RETRO="0" MAXWAIT="%s" MAXRERUN="0" AUTOARCH="1" MAXDAYS="0" MAXRUNS="0"%s TIMETO="%s" DAYS="%s"%s%s DAYS_AND_OR="%s" SHIFT="Ignore Job" SHIFTNUM="+00" SYSDB="1" IND_CYCLIC="%s" RULE_BASED_CALENDAR_RELATIONSHIP="O" CREATION_USER="1547746" CREATION_DATE="%s" CREATION_TIME="%s" APPL_TYPE="OS" MULTY_AGENT="N" USE_INSTREAM_JCL="N" CYCLIC_TOLERANCE="0" CYCLIC_TYPE="C" PARENT_FOLDER="TripleA_APP_Batch">%s
            <SHOUT WHEN="NOTOK" URGENCY="R" DEST="EM" MESSAGE=":%%%%JOBNAME job Failed, Kindly assign incident ticket to GBL-ISCM-PSS-TAP" />%s
            <OUTCOND NAME="%s-OK" ODATE="ODAT" SIGN="+" />%s
        </JOB>''' % (jobIndex, application, groupName, memLib, memName, jobName, jobDesc, runAs, critical, cyclic, nodeId, cyclicInterval, cal, maxWait, timeFrom, timeTo, monthDays, weekDays, months, daysAndOr, indCyclic, cDate, cTime, varName, inCon, jobName, rmCon)

            outFileObj.write(jobLine)

    footerLine = '''\n    </FOLDER>\n</DEFTABLE>'''
    outFileObj.write(footerLine)

    outFileObj.close()


def usage():
    ''' Usage of the script '''

    print('\n\tUsage: %s -i <excel_file> [-o <xml_file>] [-t <file_type>]\n' % curFile)


def main(argv):
    ''' Main Execution '''

    global curFile
    global config

    curDir = os.path.dirname(os.path.realpath(__file__))
    curFile  = os.path.basename(os.path.realpath(__file__))
    configFile = os.path.splitext(os.path.realpath(__file__))[0] + '.config'
    config = ConfigParser()
    config.read(configFile)

    try:
        opts, args = getopt.getopt(argv,'hi:o:t:',['ifile=','ofile=','filetype='])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    inFile = ''
    outFile = ''
    fileType = ''

    for opt, arg in opts:
        if opt == '-h':
            usage()
            sys.exit()
        elif opt in ('-i', '--ifile'):
            inFile = arg
        elif opt in ('-o', '--ofile'):
            outFile = arg
        elif opt in ('-t', '--filetype'):
            fileType = arg

    if not inFile:
        usage()
        sys.exit(2)

    if not outFile: outFile = os.path.splitext(inFile)[0] + '.xml'
    if not fileType: fileType = 'non_prod'

    try:
        convertExcelToXML(inFile, outFile, fileType)
    except Exception as e:
        print(e)
        print('*** Error while converting excel file to XML file ***')

    print('Done!')


if __name__ == '__main__':
    ''' Start '''

    main(sys.argv[1:])
